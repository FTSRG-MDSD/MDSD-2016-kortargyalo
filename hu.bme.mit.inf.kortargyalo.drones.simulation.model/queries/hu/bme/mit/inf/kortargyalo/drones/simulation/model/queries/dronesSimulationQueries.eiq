package hu.bme.mit.inf.kortargyalo.drones.simulation.model.queries

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://inf.mit.bme.hu/kortargyalo/dronesSimulation"
import "http://inf.mit.bme.hu/kortargyalo/dronesStructure"

private pattern droneIsInactive(drone : DroneInstance) {
	DroneInstance.state(drone, ::DONE);
}

private pattern droneIsActive(drone : DroneInstance) {
	neg find droneIsInactive(drone);
}

pattern allDronesAreInactive() {
	count find droneIsInactive(_) == N;
	check(N >= 1);
	neg find droneIsActive(_);
}

private pattern roleFilled(task : TaskInstance, role : RoleInstance) {
	TaskInstance.roleInstances(task, role);
	RoleInstance.allocatedDrone(role, _);
}

private pattern notAllRoleFilled(task : TaskInstance){
	neg find roleFilled(task, _);
}

pattern allRoleFilled(task : TaskInstance) {
	TaskInstance.state(task, ::WAITING);
	neg find notAllRoleFilled(task);
}

pattern firstRoleFilled(task : TaskInstance) {
	TaskInstance.state(task, ::NOT_STARTED);
	count find roleFilled(task, _) == 1;
}

//this warning is intentional
pattern crash(drone1 : DroneInstance, drone2: DroneInstance){
	drone1 != drone2;
	
	DroneInstance.position(drone1,drone1position);
	Position.x(drone1position,drone1positionx);
	Position.y(drone1position,drone1positiony);
	Position.z(drone1position,drone1positionz);
	DroneInstance.drone.dronetype.dimension(drone1,drone1dimension);
	Dimension.width(drone1dimension, drone1dimensionx);
	Dimension.height(drone1dimension, drone1dimensiony);
	Dimension.depth(drone1dimension, drone1dimensionz);
	
	DroneInstance.position(drone2,drone2position);
	Position.x(drone2position,drone2positionx);
	Position.y(drone2position,drone2positiony);
	Position.z(drone2position,drone2positionz);
	DroneInstance.drone.dronetype.dimension(drone2,drone2dimension);
	Dimension.width(drone2dimension, drone2dimensionx);
	Dimension.depth(drone2dimension, drone2dimensionz);
	Dimension.height(drone2dimension, drone2dimensiony);

	check(CollisionHelper.doDronesCollide(drone1positionx,drone1positiony, drone1positionz, drone1dimensionx, drone1dimensiony, drone1dimensionz,drone2positionx, drone2positiony, drone2positionz,drone2dimensionx, drone2dimensiony, drone2dimensionz));
}

pattern leftScene(drone : DroneInstance){
	DroneInstance.position.x(drone, x);
	DroneInstance.position.y(drone, y);
	DroneInstance.position.z(drone, z);

	DronesSimulation.droneInstances(ds, drone);
	
	DronesSimulation.scenario.allowedBounds.position.x(ds, scenex);
	DronesSimulation.scenario.allowedBounds.position.y(ds, sceney);
	DronesSimulation.scenario.allowedBounds.position.z(ds, scenez);
				
	DronesSimulation.scenario.allowedBounds.dimension.width(ds, boundx);
	DronesSimulation.scenario.allowedBounds.dimension.height(ds, boundy);
	DronesSimulation.scenario.allowedBounds.dimension.depth(ds, boundz);
	
	check(CollisionHelper.didDroneLeftScene(x,y,z, 
		scenex, sceney, scenez, 
		boundx, boundy, boundz
	));	
}

pattern collisionWithObject(drone : DroneInstance, obstacle : Obstacle){
	DroneInstance.position.x(drone,dronepositionx);
	DroneInstance.position.y(drone,dronepositiony);
	DroneInstance.position.z(drone,dronepositionz);
	DroneInstance.drone.dronetype.dimension.width(drone,dronedimensionx);
	DroneInstance.drone.dronetype.dimension.height(drone,dronedimensiony);
	DroneInstance.drone.dronetype.dimension.depth(drone,dronedimensionz);	

	Obstacle.position.x(obstacle, objectx);
	Obstacle.position.y(obstacle, objecty);
	Obstacle.position.z(obstacle, objectz);
	Obstacle.dimension.width(obstacle, objectdimx);
	Obstacle.dimension.height(obstacle, objectdimy);
	Obstacle.dimension.depth(obstacle, objectdimz);
	
	check(CollisionHelper.doCollideWithObstacle(dronepositionx, dronepositiony, dronepositionz, dronedimensionx, dronedimensiony, dronedimensionz, objectx, objecty, objectz, objectdimx, objectdimy, objectdimz));
		
}

pattern droneInCharger(drone : DroneInstance, charger : Charger){
	DroneInstance.position.x(drone,dronepositionx);
	DroneInstance.position.y(drone,dronepositiony);
	DroneInstance.position.z(drone,dronepositionz);
	DroneInstance.drone.dronetype.dimension.width(drone,dronedimensionx);
	DroneInstance.drone.dronetype.dimension.height(drone,dronedimensiony);
	DroneInstance.drone.dronetype.dimension.depth(drone,dronedimensionz);

	Charger(charger);

	Charger.position.x(charger, objectx);
	Charger.position.y(charger, objecty);
	Charger.position.z(charger, objectz);
	Charger.dimension.width(charger, objectdimx);
	Charger.dimension.height(charger, objectdimy);
	Charger.dimension.depth(charger, objectdimz);

	check(CollisionHelper.doCollideWithObstacle(dronepositionx, dronepositiony, dronepositionz, dronedimensionx, dronedimensiony, dronedimensionz, objectx, objecty, objectz, objectdimx, objectdimy, objectdimz));
}

private pattern observesSameObject(left : Observation, right : Observation) {
	ObstacleObservation.obstacle(left, obstacle);
	ObstacleObservation.obstacle(right, obstacle);
} or {
	DroneObservation.drone(left, drone);
	DroneObservation.drone(right, drone);
}

pattern replacedObservation(old : Observation) {
	DroneInstance.observations(drone, old);
	DroneInstance.observations(drone, novel);
	old != novel;
	find observesSameObject(old, novel);
	Observation.time(old, oldTime);
	Observation.time(novel, newTime);
	Observation.id(old, oldId);
	Observation.time(novel, newId);
	check(oldTime < newTime || (oldTime == newTime && oldId < newId));
}

pattern droneBatteryDepleted(drone : DroneInstance) {
	DroneInstance.currentBattery(drone, battery);
	check(battery <= 0);
}

