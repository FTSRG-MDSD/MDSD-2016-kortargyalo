/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.serializer;

import com.google.inject.Inject;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Charge;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.ComplexWait;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Cooperate;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehavior;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehaviorPackage;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Move;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Reaction;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Scan;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Script;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendMap;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendSignal;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Sequence;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Signal;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SimpleWait;
import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.services.DroneScriptGrammarAccess;
import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DronesStructurePackage;
import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Position;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DroneScriptSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DroneScriptGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DronesBehaviorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DronesBehaviorPackage.CHARGE:
				sequence_Charge(context, (Charge) semanticObject); 
				return; 
			case DronesBehaviorPackage.COMPLEX_WAIT:
				sequence_ComplexWait(context, (ComplexWait) semanticObject); 
				return; 
			case DronesBehaviorPackage.COOPERATE:
				sequence_Cooperate(context, (Cooperate) semanticObject); 
				return; 
			case DronesBehaviorPackage.DRONES_BEHAVIOR:
				sequence_DronesBehavior(context, (DronesBehavior) semanticObject); 
				return; 
			case DronesBehaviorPackage.MOVE:
				sequence_Move(context, (Move) semanticObject); 
				return; 
			case DronesBehaviorPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case DronesBehaviorPackage.SCAN:
				sequence_Scan(context, (Scan) semanticObject); 
				return; 
			case DronesBehaviorPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case DronesBehaviorPackage.SEND_MAP:
				sequence_SendMap(context, (SendMap) semanticObject); 
				return; 
			case DronesBehaviorPackage.SEND_SIGNAL:
				sequence_SendSignal(context, (SendSignal) semanticObject); 
				return; 
			case DronesBehaviorPackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			case DronesBehaviorPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case DronesBehaviorPackage.SIMPLE_WAIT:
				sequence_SimpleWait(context, (SimpleWait) semanticObject); 
				return; 
			}
		else if (epackage == DronesStructurePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DronesStructurePackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Charge
	 *     Charge returns Charge
	 *
	 * Constraint:
	 *     {Charge}
	 */
	protected void sequence_Charge(ISerializationContext context, Charge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ComplexWait
	 *     ComplexWait returns ComplexWait
	 *
	 * Constraint:
	 *     (timeout=INT? reactions+=Reaction* onTimeout=Statement?)
	 */
	protected void sequence_ComplexWait(ISerializationContext context, ComplexWait semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Cooperate
	 *     Cooperate returns Cooperate
	 *
	 * Constraint:
	 *     (task=[Task|ID] role=[Role|ID])
	 */
	protected void sequence_Cooperate(ISerializationContext context, Cooperate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__TASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__TASK));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCooperateAccess().getTaskTaskIDTerminalRuleCall_2_0_1(), semanticObject.getTask());
		feeder.accept(grammarAccess.getCooperateAccess().getRoleRoleIDTerminalRuleCall_4_0_1(), semanticObject.getRole());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DronesBehavior returns DronesBehavior
	 *
	 * Constraint:
	 *     (scenario=[Scenario|QualifiedName] (scripts+=Script? (signals+=Signal signals+=Signal*)?)+)
	 */
	protected void sequence_DronesBehavior(ISerializationContext context, DronesBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Move
	 *     Move returns Move
	 *
	 * Constraint:
	 *     destination=Position
	 */
	protected void sequence_Move(ISerializationContext context, Move semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.MOVE__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.MOVE__DESTINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveAccess().getDestinationPositionParserRuleCall_2_0(), semanticObject.getDestination());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (x=DOUBLE y=DOUBLE z=DOUBLE)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__X));
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__Y));
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionAccess().getXDOUBLEParserRuleCall_0_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPositionAccess().getYDOUBLEParserRuleCall_2_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getPositionAccess().getZDOUBLEParserRuleCall_4_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] statement=Statement)
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.REACTION__SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.REACTION__SIGNAL));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.REACTION__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.REACTION__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactionAccess().getSignalSignalQualifiedNameParserRuleCall_1_0_1(), semanticObject.getSignal());
		feeder.accept(grammarAccess.getReactionAccess().getStatementStatementParserRuleCall_2_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Scan
	 *     Scan returns Scan
	 *
	 * Constraint:
	 *     {Scan}
	 */
	protected void sequence_Scan(ISerializationContext context, Scan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Script returns Script
	 *
	 * Constraint:
	 *     (drone=[Drone|ID] statement=Sequence)
	 */
	protected void sequence_Script(ISerializationContext context, Script semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__DRONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__DRONE));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScriptAccess().getDroneDroneIDTerminalRuleCall_2_0_1(), semanticObject.getDrone());
		feeder.accept(grammarAccess.getScriptAccess().getStatementSequenceParserRuleCall_3_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SendMap
	 *     SendMap returns SendMap
	 *
	 * Constraint:
	 *     recipent=[Drone|ID]
	 */
	protected void sequence_SendMap(ISerializationContext context, SendMap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_MAP__RECIPENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_MAP__RECIPENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendMapAccess().getRecipentDroneIDTerminalRuleCall_3_0_1(), semanticObject.getRecipent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SendSignal
	 *     SendSignal returns SendSignal
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] recipent=[Drone|ID])
	 */
	protected void sequence_SendSignal(ISerializationContext context, SendSignal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__SIGNAL));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__RECIPENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__RECIPENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendSignalAccess().getSignalSignalQualifiedNameParserRuleCall_1_0_1(), semanticObject.getSignal());
		feeder.accept(grammarAccess.getSendSignalAccess().getRecipentDroneIDTerminalRuleCall_3_0_1(), semanticObject.getRecipent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Sequence
	 *     Sequence returns Sequence
	 *
	 * Constraint:
	 *     statements+=Statement*
	 */
	protected void sequence_Sequence(ISerializationContext context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SimpleWait
	 *     SimpleWait returns SimpleWait
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] timeout=INT?)
	 */
	protected void sequence_SimpleWait(ISerializationContext context, SimpleWait semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
