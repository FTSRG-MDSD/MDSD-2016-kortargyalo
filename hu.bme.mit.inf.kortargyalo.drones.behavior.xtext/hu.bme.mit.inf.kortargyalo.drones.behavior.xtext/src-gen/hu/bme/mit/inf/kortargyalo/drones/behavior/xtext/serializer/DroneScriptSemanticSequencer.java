/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.serializer;

import com.google.inject.Inject;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Charge;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.ComplexWait;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Cooperate;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehavior;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehaviorPackage;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Move;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Reaction;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Scan;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Script;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendMap;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendSignal;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Signal;
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SimpleWait;
import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.services.DroneScriptGrammarAccess;
import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DronesStructurePackage;
import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Position;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class DroneScriptSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private DroneScriptGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DronesBehaviorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DronesBehaviorPackage.CHARGE:
				sequence_Charge(context, (Charge) semanticObject); 
				return; 
			case DronesBehaviorPackage.COMPLEX_WAIT:
				sequence_ComplexWait(context, (ComplexWait) semanticObject); 
				return; 
			case DronesBehaviorPackage.COOPERATE:
				sequence_Cooperate(context, (Cooperate) semanticObject); 
				return; 
			case DronesBehaviorPackage.DRONES_BEHAVIOR:
				sequence_DronesBehavior(context, (DronesBehavior) semanticObject); 
				return; 
			case DronesBehaviorPackage.MOVE:
				sequence_Move(context, (Move) semanticObject); 
				return; 
			case DronesBehaviorPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case DronesBehaviorPackage.SCAN:
				sequence_Scan(context, (Scan) semanticObject); 
				return; 
			case DronesBehaviorPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case DronesBehaviorPackage.SEND_MAP:
				sequence_SendMap(context, (SendMap) semanticObject); 
				return; 
			case DronesBehaviorPackage.SEND_SIGNAL:
				sequence_SendSignal(context, (SendSignal) semanticObject); 
				return; 
			case DronesBehaviorPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case DronesBehaviorPackage.SIMPLE_WAIT:
				sequence_SimpleWait(context, (SimpleWait) semanticObject); 
				return; 
			}
		else if (epackage == DronesStructurePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DronesStructurePackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXbaseXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXbaseXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     XExpression returns Charge
	 *     Statement returns Charge
	 *     Charge returns Charge
	 *     XExpression returns Charge
	 *     XAssignment returns Charge
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns Charge
	 *     XOrExpression returns Charge
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XAndExpression returns Charge
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XEqualityExpression returns Charge
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XRelationalExpression returns Charge
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns Charge
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns Charge
	 *     XOtherOperatorExpression returns Charge
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XAdditiveExpression returns Charge
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XMultiplicativeExpression returns Charge
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns Charge
	 *     XUnaryOperation returns Charge
	 *     XCastedExpression returns Charge
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns Charge
	 *     XPostfixOperation returns Charge
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns Charge
	 *     XMemberFeatureCall returns Charge
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns Charge
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns Charge
	 *     XPrimaryExpression returns Charge
	 *     XParenthesizedExpression returns Charge
	 *     XExpressionOrVarDeclaration returns Charge
	 *
	 * Constraint:
	 *     {Charge}
	 */
	protected void sequence_Charge(ISerializationContext context, Charge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns ComplexWait
	 *     Statement returns ComplexWait
	 *     ComplexWait returns ComplexWait
	 *     XExpression returns ComplexWait
	 *     XAssignment returns ComplexWait
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns ComplexWait
	 *     XOrExpression returns ComplexWait
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XAndExpression returns ComplexWait
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XEqualityExpression returns ComplexWait
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XRelationalExpression returns ComplexWait
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns ComplexWait
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns ComplexWait
	 *     XOtherOperatorExpression returns ComplexWait
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XAdditiveExpression returns ComplexWait
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XMultiplicativeExpression returns ComplexWait
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns ComplexWait
	 *     XUnaryOperation returns ComplexWait
	 *     XCastedExpression returns ComplexWait
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns ComplexWait
	 *     XPostfixOperation returns ComplexWait
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns ComplexWait
	 *     XMemberFeatureCall returns ComplexWait
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns ComplexWait
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns ComplexWait
	 *     XPrimaryExpression returns ComplexWait
	 *     XParenthesizedExpression returns ComplexWait
	 *     XExpressionOrVarDeclaration returns ComplexWait
	 *
	 * Constraint:
	 *     (timeout=INT? reactions+=Reaction* onTimeout=XExpression?)
	 */
	protected void sequence_ComplexWait(ISerializationContext context, ComplexWait semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns Cooperate
	 *     Statement returns Cooperate
	 *     Cooperate returns Cooperate
	 *     XExpression returns Cooperate
	 *     XAssignment returns Cooperate
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns Cooperate
	 *     XOrExpression returns Cooperate
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XAndExpression returns Cooperate
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XEqualityExpression returns Cooperate
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XRelationalExpression returns Cooperate
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns Cooperate
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns Cooperate
	 *     XOtherOperatorExpression returns Cooperate
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XAdditiveExpression returns Cooperate
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XMultiplicativeExpression returns Cooperate
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns Cooperate
	 *     XUnaryOperation returns Cooperate
	 *     XCastedExpression returns Cooperate
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns Cooperate
	 *     XPostfixOperation returns Cooperate
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns Cooperate
	 *     XMemberFeatureCall returns Cooperate
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns Cooperate
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns Cooperate
	 *     XPrimaryExpression returns Cooperate
	 *     XParenthesizedExpression returns Cooperate
	 *     XExpressionOrVarDeclaration returns Cooperate
	 *
	 * Constraint:
	 *     (task=[Task|ID] role=[Role|ID])
	 */
	protected void sequence_Cooperate(ISerializationContext context, Cooperate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__TASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__TASK));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.COOPERATE__ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCooperateAccess().getTaskTaskIDTerminalRuleCall_2_0_1(), semanticObject.getTask());
		feeder.accept(grammarAccess.getCooperateAccess().getRoleRoleIDTerminalRuleCall_4_0_1(), semanticObject.getRole());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DronesBehavior returns DronesBehavior
	 *
	 * Constraint:
	 *     (imports=XImportSection? scenario=[Scenario|QualifiedName] (scripts+=Script? (signals+=Signal signals+=Signal*)?)+)
	 */
	protected void sequence_DronesBehavior(ISerializationContext context, DronesBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns Move
	 *     Statement returns Move
	 *     Move returns Move
	 *     XExpression returns Move
	 *     XAssignment returns Move
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns Move
	 *     XOrExpression returns Move
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XAndExpression returns Move
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XEqualityExpression returns Move
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XRelationalExpression returns Move
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns Move
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns Move
	 *     XOtherOperatorExpression returns Move
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XAdditiveExpression returns Move
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XMultiplicativeExpression returns Move
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns Move
	 *     XUnaryOperation returns Move
	 *     XCastedExpression returns Move
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns Move
	 *     XPostfixOperation returns Move
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns Move
	 *     XMemberFeatureCall returns Move
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns Move
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns Move
	 *     XPrimaryExpression returns Move
	 *     XParenthesizedExpression returns Move
	 *     XExpressionOrVarDeclaration returns Move
	 *
	 * Constraint:
	 *     destination=Position
	 */
	protected void sequence_Move(ISerializationContext context, Move semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.MOVE__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.MOVE__DESTINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveAccess().getDestinationPositionParserRuleCall_2_0(), semanticObject.getDestination());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (x=DOUBLE y=DOUBLE z=DOUBLE)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__X));
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__Y));
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.POSITION__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.POSITION__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionAccess().getXDOUBLEParserRuleCall_0_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPositionAccess().getYDOUBLEParserRuleCall_2_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getPositionAccess().getZDOUBLEParserRuleCall_4_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] statement=XExpression)
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.REACTION__SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.REACTION__SIGNAL));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.REACTION__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.REACTION__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactionAccess().getSignalSignalQualifiedNameParserRuleCall_1_0_1(), semanticObject.getSignal());
		feeder.accept(grammarAccess.getReactionAccess().getStatementXExpressionParserRuleCall_3_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns Scan
	 *     Statement returns Scan
	 *     Scan returns Scan
	 *     XExpression returns Scan
	 *     XAssignment returns Scan
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns Scan
	 *     XOrExpression returns Scan
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XAndExpression returns Scan
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XEqualityExpression returns Scan
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XRelationalExpression returns Scan
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns Scan
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns Scan
	 *     XOtherOperatorExpression returns Scan
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XAdditiveExpression returns Scan
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XMultiplicativeExpression returns Scan
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns Scan
	 *     XUnaryOperation returns Scan
	 *     XCastedExpression returns Scan
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns Scan
	 *     XPostfixOperation returns Scan
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns Scan
	 *     XMemberFeatureCall returns Scan
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns Scan
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns Scan
	 *     XPrimaryExpression returns Scan
	 *     XParenthesizedExpression returns Scan
	 *     XExpressionOrVarDeclaration returns Scan
	 *
	 * Constraint:
	 *     {Scan}
	 */
	protected void sequence_Scan(ISerializationContext context, Scan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Script returns Script
	 *
	 * Constraint:
	 *     (drone=[Drone|ID] statement=XBlockExpression)
	 */
	protected void sequence_Script(ISerializationContext context, Script semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__DRONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__DRONE));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SCRIPT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScriptAccess().getDroneDroneIDTerminalRuleCall_2_0_1(), semanticObject.getDrone());
		feeder.accept(grammarAccess.getScriptAccess().getStatementXBlockExpressionParserRuleCall_3_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns SendMap
	 *     Statement returns SendMap
	 *     SendMap returns SendMap
	 *     XExpression returns SendMap
	 *     XAssignment returns SendMap
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns SendMap
	 *     XOrExpression returns SendMap
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XAndExpression returns SendMap
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XEqualityExpression returns SendMap
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XRelationalExpression returns SendMap
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns SendMap
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns SendMap
	 *     XOtherOperatorExpression returns SendMap
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XAdditiveExpression returns SendMap
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XMultiplicativeExpression returns SendMap
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns SendMap
	 *     XUnaryOperation returns SendMap
	 *     XCastedExpression returns SendMap
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns SendMap
	 *     XPostfixOperation returns SendMap
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns SendMap
	 *     XMemberFeatureCall returns SendMap
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns SendMap
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns SendMap
	 *     XPrimaryExpression returns SendMap
	 *     XParenthesizedExpression returns SendMap
	 *     XExpressionOrVarDeclaration returns SendMap
	 *
	 * Constraint:
	 *     recipent=[Drone|ID]
	 */
	protected void sequence_SendMap(ISerializationContext context, SendMap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_MAP__RECIPENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_MAP__RECIPENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendMapAccess().getRecipentDroneIDTerminalRuleCall_3_0_1(), semanticObject.getRecipent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns SendSignal
	 *     Statement returns SendSignal
	 *     SendSignal returns SendSignal
	 *     XExpression returns SendSignal
	 *     XAssignment returns SendSignal
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns SendSignal
	 *     XOrExpression returns SendSignal
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XAndExpression returns SendSignal
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XEqualityExpression returns SendSignal
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XRelationalExpression returns SendSignal
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns SendSignal
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns SendSignal
	 *     XOtherOperatorExpression returns SendSignal
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XAdditiveExpression returns SendSignal
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XMultiplicativeExpression returns SendSignal
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns SendSignal
	 *     XUnaryOperation returns SendSignal
	 *     XCastedExpression returns SendSignal
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns SendSignal
	 *     XPostfixOperation returns SendSignal
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns SendSignal
	 *     XMemberFeatureCall returns SendSignal
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns SendSignal
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns SendSignal
	 *     XPrimaryExpression returns SendSignal
	 *     XParenthesizedExpression returns SendSignal
	 *     XExpressionOrVarDeclaration returns SendSignal
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] recipent=[Drone|ID])
	 */
	protected void sequence_SendSignal(ISerializationContext context, SendSignal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__SIGNAL));
			if (transientValues.isValueTransient(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__RECIPENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesBehaviorPackage.Literals.SEND_SIGNAL__RECIPENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendSignalAccess().getSignalSignalQualifiedNameParserRuleCall_1_0_1(), semanticObject.getSignal());
		feeder.accept(grammarAccess.getSendSignalAccess().getRecipentDroneIDTerminalRuleCall_3_0_1(), semanticObject.getRecipent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesStructurePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesStructurePackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XExpression returns SimpleWait
	 *     Statement returns SimpleWait
	 *     SimpleWait returns SimpleWait
	 *     XExpression returns SimpleWait
	 *     XAssignment returns SimpleWait
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns SimpleWait
	 *     XOrExpression returns SimpleWait
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XAndExpression returns SimpleWait
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XEqualityExpression returns SimpleWait
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XRelationalExpression returns SimpleWait
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns SimpleWait
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns SimpleWait
	 *     XOtherOperatorExpression returns SimpleWait
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XAdditiveExpression returns SimpleWait
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XMultiplicativeExpression returns SimpleWait
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns SimpleWait
	 *     XUnaryOperation returns SimpleWait
	 *     XCastedExpression returns SimpleWait
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns SimpleWait
	 *     XPostfixOperation returns SimpleWait
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns SimpleWait
	 *     XMemberFeatureCall returns SimpleWait
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns SimpleWait
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns SimpleWait
	 *     XPrimaryExpression returns SimpleWait
	 *     XParenthesizedExpression returns SimpleWait
	 *     XExpressionOrVarDeclaration returns SimpleWait
	 *
	 * Constraint:
	 *     (signal=[Signal|QualifiedName] timeout=INT?)
	 */
	protected void sequence_SimpleWait(ISerializationContext context, SimpleWait semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
