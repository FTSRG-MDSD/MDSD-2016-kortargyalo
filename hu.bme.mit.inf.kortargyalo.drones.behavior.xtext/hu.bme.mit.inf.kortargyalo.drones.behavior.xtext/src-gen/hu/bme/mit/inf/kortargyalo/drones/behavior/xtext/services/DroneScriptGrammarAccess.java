/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DroneScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DronesBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.DronesBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScenarioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cScenarioScenarioCrossReference_2_0 = (CrossReference)cScenarioAssignment_2.eContents().get(0);
		private final RuleCall cScenarioScenarioQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cScenarioScenarioCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cSignalKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_0_1_0 = (RuleCall)cSignalsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cSignalsAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_0_2_1_0 = (RuleCall)cSignalsAssignment_3_0_2_1.eContents().get(0);
		private final Assignment cScriptsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cScriptsScriptParserRuleCall_3_1_0 = (RuleCall)cScriptsAssignment_3_1.eContents().get(0);
		
		//DronesBehavior:
		//	imports=XImportSection?
		//	"scenario" scenario=[Scenario|QualifiedName] ("signal" signals+=Signal ("," signals+=Signal)* | scripts+=Script)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports=XImportSection? "scenario" scenario=[Scenario|QualifiedName] ("signal" signals+=Signal ("," signals+=Signal)* |
		//scripts+=Script)*
		public Group getGroup() { return cGroup; }
		
		//imports=XImportSection?
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_0_0() { return cImportsXImportSectionParserRuleCall_0_0; }
		
		//"scenario"
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//scenario=[Scenario|QualifiedName]
		public Assignment getScenarioAssignment_2() { return cScenarioAssignment_2; }
		
		//[Scenario|QualifiedName]
		public CrossReference getScenarioScenarioCrossReference_2_0() { return cScenarioScenarioCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getScenarioScenarioQualifiedNameParserRuleCall_2_0_1() { return cScenarioScenarioQualifiedNameParserRuleCall_2_0_1; }
		
		//("signal" signals+=Signal ("," signals+=Signal)* | scripts+=Script)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//"signal" signals+=Signal ("," signals+=Signal)*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"signal"
		public Keyword getSignalKeyword_3_0_0() { return cSignalKeyword_3_0_0; }
		
		//signals+=Signal
		public Assignment getSignalsAssignment_3_0_1() { return cSignalsAssignment_3_0_1; }
		
		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_0_1_0() { return cSignalsSignalParserRuleCall_3_0_1_0; }
		
		//("," signals+=Signal)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//","
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//signals+=Signal
		public Assignment getSignalsAssignment_3_0_2_1() { return cSignalsAssignment_3_0_2_1; }
		
		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_0_2_1_0() { return cSignalsSignalParserRuleCall_3_0_2_1_0; }
		
		//scripts+=Script
		public Assignment getScriptsAssignment_3_1() { return cScriptsAssignment_3_1; }
		
		//Script
		public RuleCall getScriptsScriptParserRuleCall_3_1_0() { return cScriptsScriptParserRuleCall_3_1_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Signal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Signal:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDroneAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDroneDroneCrossReference_2_0 = (CrossReference)cDroneAssignment_2.eContents().get(0);
		private final RuleCall cDroneDroneIDTerminalRuleCall_2_0_1 = (RuleCall)cDroneDroneCrossReference_2_0.eContents().get(1);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementXBlockExpressionParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//Script:
		//	"script" "for" drone=[Drone] statement=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"script" "for" drone=[Drone] statement=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//drone=[Drone]
		public Assignment getDroneAssignment_2() { return cDroneAssignment_2; }
		
		//[Drone]
		public CrossReference getDroneDroneCrossReference_2_0() { return cDroneDroneCrossReference_2_0; }
		
		//ID
		public RuleCall getDroneDroneIDTerminalRuleCall_2_0_1() { return cDroneDroneIDTerminalRuleCall_2_0_1; }
		
		//statement=XBlockExpression
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//XBlockExpression
		public RuleCall getStatementXBlockExpressionParserRuleCall_3_0() { return cStatementXBlockExpressionParserRuleCall_3_0; }
	}
	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.XExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XExpression xbase::XExpression:
		//	Statement | super::XExpression
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | super::XExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//super::XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleWaitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexWaitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSendSignalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCooperateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cChargeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cScanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSendMapParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Statement:
		//	SimpleWait | ComplexWait | Move | SendSignal | Cooperate | Charge | Scan | SendMap;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleWait | ComplexWait | Move | SendSignal | Cooperate | Charge | Scan | SendMap
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleWait
		public RuleCall getSimpleWaitParserRuleCall_0() { return cSimpleWaitParserRuleCall_0; }
		
		//ComplexWait
		public RuleCall getComplexWaitParserRuleCall_1() { return cComplexWaitParserRuleCall_1; }
		
		//Move
		public RuleCall getMoveParserRuleCall_2() { return cMoveParserRuleCall_2; }
		
		//SendSignal
		public RuleCall getSendSignalParserRuleCall_3() { return cSendSignalParserRuleCall_3; }
		
		//Cooperate
		public RuleCall getCooperateParserRuleCall_4() { return cCooperateParserRuleCall_4; }
		
		//Charge
		public RuleCall getChargeParserRuleCall_5() { return cChargeParserRuleCall_5; }
		
		//Scan
		public RuleCall getScanParserRuleCall_6() { return cScanParserRuleCall_6; }
		
		//SendMap
		public RuleCall getSendMapParserRuleCall_7() { return cSendMapParserRuleCall_7; }
	}
	public class SimpleWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.SimpleWait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTimeoutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_3_1_0 = (RuleCall)cTimeoutAssignment_3_1.eContents().get(0);
		
		//SimpleWait:
		//	"wait" "for" signal=[Signal|QualifiedName] ("timeout" timeout=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"wait" "for" signal=[Signal|QualifiedName] ("timeout" timeout=INT)?
		public Group getGroup() { return cGroup; }
		
		//"wait"
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//signal=[Signal|QualifiedName]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//[Signal|QualifiedName]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSignalSignalQualifiedNameParserRuleCall_2_0_1() { return cSignalSignalQualifiedNameParserRuleCall_2_0_1; }
		
		//("timeout" timeout=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_3_0() { return cTimeoutKeyword_3_0; }
		
		//timeout=INT
		public Assignment getTimeoutAssignment_3_1() { return cTimeoutAssignment_3_1; }
		
		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_3_1_0() { return cTimeoutINTTerminalRuleCall_3_1_0; }
	}
	public class ComplexWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.ComplexWait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComplexWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTimeoutKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeoutAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeoutAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactionsReactionParserRuleCall_4_0 = (RuleCall)cReactionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTimeoutKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOnTimeoutAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOnTimeoutXExpressionParserRuleCall_5_2_0 = (RuleCall)cOnTimeoutAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComplexWait:
		//	{ComplexWait} "wait" ("timeout" timeout=INT)? "{"
		//	reactions+=Reaction* ("on" "timeout" onTimeout=XExpression)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{ComplexWait} "wait" ("timeout" timeout=INT)? "{" reactions+=Reaction* ("on" "timeout" onTimeout=XExpression)? "}"
		public Group getGroup() { return cGroup; }
		
		//{ComplexWait}
		public Action getComplexWaitAction_0() { return cComplexWaitAction_0; }
		
		//"wait"
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }
		
		//("timeout" timeout=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_2_0() { return cTimeoutKeyword_2_0; }
		
		//timeout=INT
		public Assignment getTimeoutAssignment_2_1() { return cTimeoutAssignment_2_1; }
		
		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_2_1_0() { return cTimeoutINTTerminalRuleCall_2_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//reactions+=Reaction*
		public Assignment getReactionsAssignment_4() { return cReactionsAssignment_4; }
		
		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_4_0() { return cReactionsReactionParserRuleCall_4_0; }
		
		//("on" "timeout" onTimeout=XExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"on"
		public Keyword getOnKeyword_5_0() { return cOnKeyword_5_0; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_5_1() { return cTimeoutKeyword_5_1; }
		
		//onTimeout=XExpression
		public Assignment getOnTimeoutAssignment_5_2() { return cOnTimeoutAssignment_5_2; }
		
		//XExpression
		public RuleCall getOnTimeoutXExpressionParserRuleCall_5_2_0() { return cOnTimeoutXExpressionParserRuleCall_5_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_1_0 = (CrossReference)cSignalAssignment_1.eContents().get(0);
		private final RuleCall cSignalSignalQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSignalSignalCrossReference_1_0.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementXExpressionParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//Reaction:
		//	"on" signal=[Signal|QualifiedName] statement=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"on" signal=[Signal|QualifiedName] statement=XExpression
		public Group getGroup() { return cGroup; }
		
		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//signal=[Signal|QualifiedName]
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }
		
		//[Signal|QualifiedName]
		public CrossReference getSignalSignalCrossReference_1_0() { return cSignalSignalCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSignalSignalQualifiedNameParserRuleCall_1_0_1() { return cSignalSignalQualifiedNameParserRuleCall_1_0_1; }
		
		//statement=XExpression
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//XExpression
		public RuleCall getStatementXExpressionParserRuleCall_2_0() { return cStatementXExpressionParserRuleCall_2_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestinationPositionParserRuleCall_2_0 = (RuleCall)cDestinationAssignment_2.eContents().get(0);
		
		//Move:
		//	"move" "to" destination=Position;
		@Override public ParserRule getRule() { return rule; }
		
		//"move" "to" destination=Position
		public Group getGroup() { return cGroup; }
		
		//"move"
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//destination=Position
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }
		
		//Position
		public RuleCall getDestinationPositionParserRuleCall_2_0() { return cDestinationPositionParserRuleCall_2_0; }
	}
	public class SendSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.SendSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_1_0 = (CrossReference)cSignalAssignment_1.eContents().get(0);
		private final RuleCall cSignalSignalQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSignalSignalCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRecipentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRecipentDroneCrossReference_3_0 = (CrossReference)cRecipentAssignment_3.eContents().get(0);
		private final RuleCall cRecipentDroneIDTerminalRuleCall_3_0_1 = (RuleCall)cRecipentDroneCrossReference_3_0.eContents().get(1);
		
		//SendSignal:
		//	"send" signal=[Signal|QualifiedName] "to" recipent=[Drone];
		@Override public ParserRule getRule() { return rule; }
		
		//"send" signal=[Signal|QualifiedName] "to" recipent=[Drone]
		public Group getGroup() { return cGroup; }
		
		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//signal=[Signal|QualifiedName]
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }
		
		//[Signal|QualifiedName]
		public CrossReference getSignalSignalCrossReference_1_0() { return cSignalSignalCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSignalSignalQualifiedNameParserRuleCall_1_0_1() { return cSignalSignalQualifiedNameParserRuleCall_1_0_1; }
		
		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//recipent=[Drone]
		public Assignment getRecipentAssignment_3() { return cRecipentAssignment_3; }
		
		//[Drone]
		public CrossReference getRecipentDroneCrossReference_3_0() { return cRecipentDroneCrossReference_3_0; }
		
		//ID
		public RuleCall getRecipentDroneIDTerminalRuleCall_3_0_1() { return cRecipentDroneIDTerminalRuleCall_3_0_1; }
	}
	public class CooperateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Cooperate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCooperateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRoleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRoleRoleCrossReference_4_0 = (CrossReference)cRoleAssignment_4.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_4_0_1 = (RuleCall)cRoleRoleCrossReference_4_0.eContents().get(1);
		
		//Cooperate:
		//	"cooperate" "on" task=[Task] "as" role=[Role];
		@Override public ParserRule getRule() { return rule; }
		
		//"cooperate" "on" task=[Task] "as" role=[Role]
		public Group getGroup() { return cGroup; }
		
		//"cooperate"
		public Keyword getCooperateKeyword_0() { return cCooperateKeyword_0; }
		
		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//task=[Task]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_1; }
		
		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//role=[Role]
		public Assignment getRoleAssignment_4() { return cRoleAssignment_4; }
		
		//[Role]
		public CrossReference getRoleRoleCrossReference_4_0() { return cRoleRoleCrossReference_4_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_4_0_1() { return cRoleRoleIDTerminalRuleCall_4_0_1; }
	}
	public class ChargeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Charge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChargeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChargeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Charge:
		//	{Charge} "charge";
		@Override public ParserRule getRule() { return rule; }
		
		//{Charge} "charge"
		public Group getGroup() { return cGroup; }
		
		//{Charge}
		public Action getChargeAction_0() { return cChargeAction_0; }
		
		//"charge"
		public Keyword getChargeKeyword_1() { return cChargeKeyword_1; }
	}
	public class ScanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Scan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Scan:
		//	{Scan} "scan";
		@Override public ParserRule getRule() { return rule; }
		
		//{Scan} "scan"
		public Group getGroup() { return cGroup; }
		
		//{Scan}
		public Action getScanAction_0() { return cScanAction_0; }
		
		//"scan"
		public Keyword getScanKeyword_1() { return cScanKeyword_1; }
	}
	public class SendMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.SendMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRecipentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRecipentDroneCrossReference_3_0 = (CrossReference)cRecipentAssignment_3.eContents().get(0);
		private final RuleCall cRecipentDroneIDTerminalRuleCall_3_0_1 = (RuleCall)cRecipentDroneCrossReference_3_0.eContents().get(1);
		
		//SendMap:
		//	"send" "map" "to" recipent=[Drone];
		@Override public ParserRule getRule() { return rule; }
		
		//"send" "map" "to" recipent=[Drone]
		public Group getGroup() { return cGroup; }
		
		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//"map"
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//recipent=[Drone]
		public Assignment getRecipentAssignment_3() { return cRecipentAssignment_3; }
		
		//[Drone]
		public CrossReference getRecipentDroneCrossReference_3_0() { return cRecipentDroneCrossReference_3_0; }
		
		//ID
		public RuleCall getRecipentDroneIDTerminalRuleCall_3_0_1() { return cRecipentDroneIDTerminalRuleCall_3_0_1; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXDOUBLEParserRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYDOUBLEParserRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cZAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZDOUBLEParserRuleCall_4_0 = (RuleCall)cZAssignment_4.eContents().get(0);
		
		//Position:
		//	x=DOUBLE "," y=DOUBLE "," z=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//x=DOUBLE "," y=DOUBLE "," z=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//x=DOUBLE
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//DOUBLE
		public RuleCall getXDOUBLEParserRuleCall_0_0() { return cXDOUBLEParserRuleCall_0_0; }
		
		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//y=DOUBLE
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//DOUBLE
		public RuleCall getYDOUBLEParserRuleCall_2_0() { return cYDOUBLEParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//z=DOUBLE
		public Assignment getZAssignment_4() { return cZAssignment_4; }
		
		//DOUBLE
		public RuleCall getZDOUBLEParserRuleCall_4_0() { return cZDOUBLEParserRuleCall_4_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//DOUBLE ecore::EDouble:
		//	"-"? INT ("." INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }
		
		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	private final DronesBehaviorElements pDronesBehavior;
	private final SignalElements pSignal;
	private final ScriptElements pScript;
	private final XExpressionElements pXExpression;
	private final StatementElements pStatement;
	private final SimpleWaitElements pSimpleWait;
	private final ComplexWaitElements pComplexWait;
	private final ReactionElements pReaction;
	private final MoveElements pMove;
	private final SendSignalElements pSendSignal;
	private final CooperateElements pCooperate;
	private final ChargeElements pCharge;
	private final ScanElements pScan;
	private final SendMapElements pSendMap;
	private final PositionElements pPosition;
	private final DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DroneScriptGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDronesBehavior = new DronesBehaviorElements();
		this.pSignal = new SignalElements();
		this.pScript = new ScriptElements();
		this.pXExpression = new XExpressionElements();
		this.pStatement = new StatementElements();
		this.pSimpleWait = new SimpleWaitElements();
		this.pComplexWait = new ComplexWaitElements();
		this.pReaction = new ReactionElements();
		this.pMove = new MoveElements();
		this.pSendSignal = new SendSignalElements();
		this.pCooperate = new CooperateElements();
		this.pCharge = new ChargeElements();
		this.pScan = new ScanElements();
		this.pSendMap = new SendMapElements();
		this.pPosition = new PositionElements();
		this.pDOUBLE = new DOUBLEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//DronesBehavior:
	//	imports=XImportSection?
	//	"scenario" scenario=[Scenario|QualifiedName] ("signal" signals+=Signal ("," signals+=Signal)* | scripts+=Script)*;
	public DronesBehaviorElements getDronesBehaviorAccess() {
		return pDronesBehavior;
	}
	
	public ParserRule getDronesBehaviorRule() {
		return getDronesBehaviorAccess().getRule();
	}
	
	//Signal:
	//	name=ID;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Script:
	//	"script" "for" drone=[Drone] statement=XBlockExpression;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//XExpression xbase::XExpression:
	//	Statement | super::XExpression
	public XExpressionElements getXExpressionAccess() {
		return pXExpression;
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//Statement:
	//	SimpleWait | ComplexWait | Move | SendSignal | Cooperate | Charge | Scan | SendMap;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleWait:
	//	"wait" "for" signal=[Signal|QualifiedName] ("timeout" timeout=INT)?;
	public SimpleWaitElements getSimpleWaitAccess() {
		return pSimpleWait;
	}
	
	public ParserRule getSimpleWaitRule() {
		return getSimpleWaitAccess().getRule();
	}
	
	//ComplexWait:
	//	{ComplexWait} "wait" ("timeout" timeout=INT)? "{"
	//	reactions+=Reaction* ("on" "timeout" onTimeout=XExpression)?
	//	"}";
	public ComplexWaitElements getComplexWaitAccess() {
		return pComplexWait;
	}
	
	public ParserRule getComplexWaitRule() {
		return getComplexWaitAccess().getRule();
	}
	
	//Reaction:
	//	"on" signal=[Signal|QualifiedName] statement=XExpression;
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//Move:
	//	"move" "to" destination=Position;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//SendSignal:
	//	"send" signal=[Signal|QualifiedName] "to" recipent=[Drone];
	public SendSignalElements getSendSignalAccess() {
		return pSendSignal;
	}
	
	public ParserRule getSendSignalRule() {
		return getSendSignalAccess().getRule();
	}
	
	//Cooperate:
	//	"cooperate" "on" task=[Task] "as" role=[Role];
	public CooperateElements getCooperateAccess() {
		return pCooperate;
	}
	
	public ParserRule getCooperateRule() {
		return getCooperateAccess().getRule();
	}
	
	//Charge:
	//	{Charge} "charge";
	public ChargeElements getChargeAccess() {
		return pCharge;
	}
	
	public ParserRule getChargeRule() {
		return getChargeAccess().getRule();
	}
	
	//Scan:
	//	{Scan} "scan";
	public ScanElements getScanAccess() {
		return pScan;
	}
	
	public ParserRule getScanRule() {
		return getScanAccess().getRule();
	}
	
	//SendMap:
	//	"send" "map" "to" recipent=[Drone];
	public SendMapElements getSendMapAccess() {
		return pSendMap;
	}
	
	public ParserRule getSendMapRule() {
		return getSendMapAccess().getRule();
	}
	
	//Position:
	//	x=DOUBLE "," y=DOUBLE "," z=DOUBLE;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//DOUBLE ecore::EDouble:
	//	"-"? INT ("." INT)?
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXbaseXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXbaseXExpressionRule() {
		return getXbaseXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=super::XExpression (',' memberCallArguments+=super::XExpression)*)? ')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=super::XExpression (',' elements+=super::XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=super::XExpression (',' elements+=super::XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=super::XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' super::XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=super::XExpression ')' then=super::XExpression (=> 'else' else=super::XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=super::XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=super::XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=super::XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=super::XExpression)? (':' then=super::XExpression |
	//	fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=super::XExpression ')'
	//	eachExpression=super::XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=super::XExpression? ';'
	//	(updateExpressions+=super::XExpression (',' updateExpressions+=super::XExpression)*)? ')'
	//	eachExpression=super::XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=super::XExpression ')' body=super::XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=super::XExpression 'while' '(' predicate=super::XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | super::XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=super::XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=super::XExpression (',' featureCallArguments+=super::XExpression)*)? ')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=super::XExpression (','
	//	arguments+=super::XExpression)*)? ')')? arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=super::XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=super::XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=super::XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=super::XExpression)? | 'finally' finallyExpression=super::XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=super::XExpression ')' expression=super::XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=super::XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
