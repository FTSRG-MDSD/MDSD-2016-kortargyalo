/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.xtext

import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.compiler.DroneScriptCompiler
import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.resource.DroneScriptResourceDescriptionStrategy
import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.scoping.DroneScriptScopeProvider
import hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.typesystem.DroneScriptTypeComputer
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.xbase.compiler.XbaseCompiler
import org.eclipse.xtext.xbase.scoping.batch.IBatchScopeProvider
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class DroneScriptRuntimeModule extends AbstractDroneScriptRuntimeModule {

	override Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		DroneScriptResourceDescriptionStrategy
	}

	override Class<? extends IBatchScopeProvider> bindIBatchScopeProvider() {
		// Xbase languages use IBatchScopeProvider for linking instead of IScopeProvider,
		// therefore it is possible that an object is in scope for content assist, but cannot be linked.
		// We inject our own scope provider, which derives from XbaseBatchScopeProvider, to remedy this.
		DroneScriptScopeProvider
	}
	
	def Class<? extends ITypeComputer> bindITypeComputer() {
		DroneScriptTypeComputer
	}
	
	def Class<? extends XbaseCompiler> bindXbaseCompiler() {
		DroneScriptCompiler
	}
}
