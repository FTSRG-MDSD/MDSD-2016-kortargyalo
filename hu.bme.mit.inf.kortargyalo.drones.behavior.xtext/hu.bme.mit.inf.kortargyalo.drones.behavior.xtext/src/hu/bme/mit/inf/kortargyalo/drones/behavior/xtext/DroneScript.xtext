grammar hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.DroneScript with org.eclipse.xtext.xbase.Xbase

import "http://inf.mit.bme.hu/kortargyalo/dronesBehavior"
import "http://inf.mit.bme.hu/kortargyalo/dronesStructure"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DronesBehavior:
	imports=XImportSection?
	"scenario" scenario=[Scenario|QualifiedName]
	("signal" signals+=Signal ("," signals+=Signal)* | scripts+=Script)*;

Signal:
	name=ID;

Script:
	"script" "for" drone=[Drone] statement=XBlockExpression;

XExpression returns xbase::XExpression:
	Statement | super::XExpression;

Statement:
	 SimpleWait | ComplexWait | Move | SendSignal | Cooperate | Charge | Scan | SendMap;

SimpleWait:
	"wait" "for" signal=[Signal|QualifiedName] ("timeout" timeout=INT)?;

ComplexWait:
	{ComplexWait} "wait" ("timeout" timeout=INT)? "{"
	reactions+=Reaction*
	("on" "timeout" ":" onTimeout=XExpression)?
	"}";

Reaction:
	"on" signal=[Signal|QualifiedName] ":" statement=XExpression;

Move:
	"move" "to" destination=Position;

SendSignal:
	"send" signal=[Signal|QualifiedName] "to" recipent=[Drone];

Cooperate:
	"cooperate" "on" task=[Task] "as" role=[Role];

Charge:
	{Charge} "charge";

Scan:
	{Scan} "scan";

SendMap:
	"send" "map" "to" recipent=[Drone];

Position:
	x=DOUBLE "," y=DOUBLE "," z=DOUBLE;

DOUBLE returns ecore::EDouble:
	"-"? INT ("." INT)?;

/*QualifiedName hidden():
	ID ("." ID)*;*/
