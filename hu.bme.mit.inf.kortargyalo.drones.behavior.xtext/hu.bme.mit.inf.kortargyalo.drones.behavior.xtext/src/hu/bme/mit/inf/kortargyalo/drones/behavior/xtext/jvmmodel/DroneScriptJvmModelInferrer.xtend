/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.xtext.jvmmodel

import co.paralleluniverse.fibers.SuspendExecution
import com.google.inject.Inject
import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Script
import hu.bme.mit.inf.kortargyalo.drones.simulation.runtime.entities.DroneSimProcess
import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Scenario
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import hu.bme.mit.inf.kortargyalo.drones.simulation.runtime.entities.DronesSimModel
import hu.bme.mit.inf.kortargyalo.drones.simulation.dronesSimulation.DroneInstance

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class DroneScriptJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the closure you pass to the returned
	 *            {@link IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
	 *            initializeLater(..)}.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	/*def dispatch void infer(DronesBehavior element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
	 * 	
	 }*/
	def dispatch void infer(Script element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		val drone = element.drone
		if (drone == null || drone.name.isNullOrEmpty) {
			return
		}
		val scenario = EcoreUtil2.getContainerOfType(drone, Scenario)
		if (scenario == null || scenario.name.isNullOrEmpty) {
			return
		}

		acceptor.accept(element.toClass('''«scenario.name».«drone.name»_SimProcess''')) [
			superTypes += typeRef(DroneSimProcess)

			members += element.toConstructor [
				visibility = JvmVisibility.PUBLIC
				parameters += element.toParameter("owner", typeRef(DronesSimModel))
				parameters += element.toParameter("droneInstance", typeRef(DroneInstance))
				parameters += element.toParameter("showInTrace", typeRef(Boolean.TYPE))
				val params = parameters
				body = '''super(«FOR param : params SEPARATOR ", "»«param.name»«ENDFOR»);'''
			]

			members += element.toMethod("runScript", typeRef(Void.TYPE)) [
				visibility = JvmVisibility.PROTECTED
				exceptions += typeRef(SuspendExecution)
				body = element.statement
			]
		]
	}
}
