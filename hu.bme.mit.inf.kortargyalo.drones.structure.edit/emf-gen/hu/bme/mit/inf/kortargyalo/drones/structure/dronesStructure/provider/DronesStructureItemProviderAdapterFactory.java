/**
 */
package hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.provider;

import hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.util.DronesStructureAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DronesStructureItemProviderAdapterFactory extends DronesStructureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DronesStructureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DronesStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DronesStructureItemProvider dronesStructureItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DronesStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDronesStructureAdapter() {
		if (dronesStructureItemProvider == null) {
			dronesStructureItemProvider = new DronesStructureItemProvider(this);
		}

		return dronesStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Capability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityItemProvider capabilityItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Capability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAdapter() {
		if (capabilityItemProvider == null) {
			capabilityItemProvider = new CapabilityItemProvider(this);
		}

		return capabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DroneType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DroneTypeItemProvider droneTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.DroneType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDroneTypeAdapter() {
		if (droneTypeItemProvider == null) {
			droneTypeItemProvider = new DroneTypeItemProvider(this);
		}

		return droneTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.ProvidedCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedCapabilityItemProvider providedCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.ProvidedCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedCapabilityAdapter() {
		if (providedCapabilityItemProvider == null) {
			providedCapabilityItemProvider = new ProvidedCapabilityItemProvider(this);
		}

		return providedCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.MovementCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MovementCapabilityItemProvider movementCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.MovementCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMovementCapabilityAdapter() {
		if (movementCapabilityItemProvider == null) {
			movementCapabilityItemProvider = new MovementCapabilityItemProvider(this);
		}

		return movementCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.CooperativeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CooperativeActionItemProvider cooperativeActionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.CooperativeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCooperativeActionAdapter() {
		if (cooperativeActionItemProvider == null) {
			cooperativeActionItemProvider = new CooperativeActionItemProvider(this);
		}

		return cooperativeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.RequiredCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredCapabilityItemProvider requiredCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.RequiredCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredCapabilityAdapter() {
		if (requiredCapabilityItemProvider == null) {
			requiredCapabilityItemProvider = new RequiredCapabilityItemProvider(this);
		}

		return requiredCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Drone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DroneItemProvider droneItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Drone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDroneAdapter() {
		if (droneItemProvider == null) {
			droneItemProvider = new DroneItemProvider(this);
		}

		return droneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Position} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionItemProvider positionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Position}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionAdapter() {
		if (positionItemProvider == null) {
			positionItemProvider = new PositionItemProvider(this);
		}

		return positionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Obstacle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObstacleItemProvider obstacleItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Obstacle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObstacleAdapter() {
		if (obstacleItemProvider == null) {
			obstacleItemProvider = new ObstacleItemProvider(this);
		}

		return obstacleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Region} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionItemProvider regionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Region}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionAdapter() {
		if (regionItemProvider == null) {
			regionItemProvider = new RegionItemProvider(this);
		}

		return regionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.ScenarioBounds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioBoundsItemProvider scenarioBoundsItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.ScenarioBounds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioBoundsAdapter() {
		if (scenarioBoundsItemProvider == null) {
			scenarioBoundsItemProvider = new ScenarioBoundsItemProvider(this);
		}

		return scenarioBoundsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Charger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChargerItemProvider chargerItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.structure.dronesStructure.Charger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChargerAdapter() {
		if (chargerItemProvider == null) {
			chargerItemProvider = new ChargerItemProvider(this);
		}

		return chargerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dronesStructureItemProvider != null) dronesStructureItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (capabilityItemProvider != null) capabilityItemProvider.dispose();
		if (droneTypeItemProvider != null) droneTypeItemProvider.dispose();
		if (providedCapabilityItemProvider != null) providedCapabilityItemProvider.dispose();
		if (movementCapabilityItemProvider != null) movementCapabilityItemProvider.dispose();
		if (cooperativeActionItemProvider != null) cooperativeActionItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (requiredCapabilityItemProvider != null) requiredCapabilityItemProvider.dispose();
		if (droneItemProvider != null) droneItemProvider.dispose();
		if (positionItemProvider != null) positionItemProvider.dispose();
		if (dimensionItemProvider != null) dimensionItemProvider.dispose();
		if (obstacleItemProvider != null) obstacleItemProvider.dispose();
		if (regionItemProvider != null) regionItemProvider.dispose();
		if (scenarioBoundsItemProvider != null) scenarioBoundsItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (chargerItemProvider != null) chargerItemProvider.dispose();
	}

}
