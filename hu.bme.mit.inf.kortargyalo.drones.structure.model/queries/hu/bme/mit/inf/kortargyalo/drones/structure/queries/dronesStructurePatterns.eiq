package hu.bme.mit.inf.kortargyalo.drones.structure.queries

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://inf.mit.bme.hu/kortargyalo/dronesStructure"

private pattern providedMovementCapability(DroneType : DroneType, ProvidedCapability : ProvidedCapability) {
	DroneType.providedCapabilities(DroneType, ProvidedCapability);
	ProvidedCapability.capability(ProvidedCapability, Capability);
	MovementCapability(Capability);
}

private pattern providedScanningCapability(DroneType : DroneType, ProvidedCapability : ProvidedCapability) {
	DroneType.providedCapabilities(DroneType, ProvidedCapability);
	ProvidedCapability.capability(ProvidedCapability, Capability);
	ScanningCapability(Capability);
}

@Constraint(
	key = {"DroneType"},
	severity = "error",
	message = "A drone type must have exactly one movement capability."
)
pattern notOneMovementCapabilityProvided(DroneType : DroneType) {
	1 != count find providedMovementCapability(DroneType, _);
}

@Constraint(
	key = {"DroneType"},
	severity = "error",
	message = "A drone type must have one scanning capability at most."
)
pattern moreThanOneScanningCapabilities(DroneType : DroneType) {
	find providedScanningCapability(DroneType, Capability1);
	find providedScanningCapability(DroneType, Capability2);
	Capability1 != Capability2;
}

@QueryBasedFeature
pattern movementCapability(This : DroneType, Target : ProvidedCapability) {
	find providedMovementCapability(This, Target);
	1 == count find providedMovementCapability(This, _);
}

@QueryBasedFeature
pattern scanningCapability(This : DroneType, Target : ProvidedCapability) {
	find providedScanningCapability(This, Target);
	1 == count find providedScanningCapability(This, _);
}

@Constraint(
	key = {"NamedElement"},
	severity = "error",
	message = "Duplicate name $Name$."
)
pattern duplicateName(NamedElement : NamedElement, Name : ecore::EString) {
	find inRelatedScope(NamedElement, Other);
	NamedElement.name(NamedElement, Name);
	NamedElement.name(Other, Name);
	NamedElement != Other;
}

private pattern nameScope(Element : NamedElement, Scope : ecore::EObject) {
	DronesStructure.scenarios(Scope, Element);
} or {
	DronesStructure.capabilities(Scope, Element);
} or {
	DronesStructure.droneTypes(Scope, Element);
} or {
	DronesStructure.cooperativeActions(Scope, Element);
} or {
	Scenario.obstacles(Scope, Element);
} or {
	Scenario.regions(Scope, Element);
} or {
	Scenario.drones(Scope, Element);
} or {
	CooperativeAction.roles(Scope, Element);
}

private pattern childScope(Parent : ecore::EObject, Child : ecore::EObject) {
	DronesStructure.scenarios(Parent, Child);
} or {
	DronesStructure.cooperativeActions(Parent, Child);
}

private pattern relatedScope(Left : ecore::EObject, Right : ecore::EObject) {
	Left == Right;
} or {
	find childScope+(Left, Right);
} or {
	find childScope+(Right, Left);
}

private pattern inRelatedScope(Left : NamedElement, Right : NamedElement) {
	find nameScope(Left, LeftScope);
	find nameScope(Right, RightScope);
	find relatedScope(LeftScope, RightScope);
}

// Validation rules for attributes:

@Constraint(
	key = {"Dimension"},
	severity = "error",
	message = "Dimensions must be positive."
)
pattern nonpositiveDimension(Dimension : Dimension) {
	Dimension.width(Dimension, Width);
	Dimension.depth(Dimension, Depth);
	Dimension.height(Dimension, Height);
	check(Width <= 0 || Depth <= 0 || Height <= 0);
}

@Constraint(
	key = {"DroneType"},
	severity = "error",
	message = "Weight of drone type $DroneType.name$ must be positive."
)
pattern nonpositiveWeight(DroneType : DroneType) {
	DroneType.weight(DroneType, Weight);
	check(Weight <= 0);
}

@Constraint(
	key = {"DroneType"},
	severity = "error",
	message = "Battery capacity of drone type $DroneType.name$ must be positive."
)
pattern nonpositiveBatteryCapacity(DroneType : DroneType) {
	DroneType.maxBatteryCapacity(DroneType, Capacity);
	check(Capacity <= 0);
}

@Constraint(
	key = {"DroneType"},
	severity = "error",
	message = "Idle energy consumption of drone type $DroneType.name$ must not be negative."
)
pattern negativeEnergyConsumption(DroneType : DroneType) {
	DroneType.idleEneryConsumption(DroneType, Consumption);
	check(Consumption < 0);
}

@Constraint(
	key = {"ProvidedCapability"},
	severity = "error",
	message = "Maximal value of provided capability $Capability.name$ of $DroneType.name$ must be positive."
)
pattern nonpositiveProvidedCapability(ProvidedCapability : ProvidedCapability, Capability : Capability, DroneType : DroneType) {
	ProvidedCapability.maximalValue(ProvidedCapability, Value);
	check(Value <= 0);
	ProvidedCapability.capability(ProvidedCapability, Capability);
	ProvidedCapability.droneType(ProvidedCapability, DroneType);
}

@Constraint(
	key = {"ProvidedCapability"},
	severity = "error",
	message = "Energy consumption of provided capability $Capability.name$ of $DroneType.name$ must not be negative."
)
pattern negativeCostProvidedCapability(ProvidedCapability : ProvidedCapability, Capability : Capability, DroneType : DroneType) {
	ProvidedCapability.energyConsumptionPerValue(ProvidedCapability, Value);
	check(Value < 0);
	ProvidedCapability.capability(ProvidedCapability, Capability);
	ProvidedCapability.droneType(ProvidedCapability, DroneType);
}

@Constraint(
	key = {"RequiredCapability"},
	severity = "error",
	message = "Minimal value of provided capability $Capability.name$ of $Action.name$.$Role.name$ must be positive."
)
pattern nonpositiveRequiredCapability(RequiredCapability : RequiredCapability, Capability : Capability, Action : CooperativeAction, Role : Role) {
	RequiredCapability.minimalValue(RequiredCapability, Value);
	check(Value <= 0);
	RequiredCapability.capability(RequiredCapability, Capability);
	RequiredCapability.role(RequiredCapability, Role);
	CooperativeAction.roles(Action, Role);
}

@Constraint(
	key = {"ProvidedCapability"},
	severity = "error",
	message = "Provided scanning capability $Capability.name$ of $DroneType.name$ cannot consume energy."
)
pattern providedScanningCapabilityWithCost(ProvidedCapability : ProvidedCapability, Capability : ScanningCapability, DroneType : DroneType) {
	ProvidedCapability.energyConsumptionPerValue(ProvidedCapability, Value);
	check(Value != 0);
	ProvidedCapability.capability(ProvidedCapability, Capability);
	ProvidedCapability.droneType(ProvidedCapability, DroneType);
}

@Constraint(
	key = {"Action"},
	severity = "error",
	message = "Start timeout of cooperative action $Action.name$ must be positive."
)
pattern nonpositiveStartTimeout(Action : CooperativeAction) {
	CooperativeAction.startTimeout(Action, StartTimeout);
	check(StartTimeout <= 0);
}

@Constraint(
	key = {"Action"},
	severity = "error",
	message = "Duration of cooperative action $Action.name$ must be longer than the start timeout."
)
pattern durationTooShort(Action : CooperativeAction) {
	CooperativeAction.startTimeout(Action, StartTimeout);
	CooperativeAction.duration(Action, Duration);
	check(StartTimeout >= Duration);
}
