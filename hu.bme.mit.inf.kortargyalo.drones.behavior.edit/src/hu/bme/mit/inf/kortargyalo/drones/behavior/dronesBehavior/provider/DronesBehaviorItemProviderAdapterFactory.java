/**
 */
package hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.provider;

import hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.util.DronesBehaviorAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DronesBehaviorItemProviderAdapterFactory extends DronesBehaviorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DronesBehaviorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DronesBehaviorItemProvider dronesBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.DronesBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDronesBehaviorAdapter() {
		if (dronesBehaviorItemProvider == null) {
			dronesBehaviorItemProvider = new DronesBehaviorItemProvider(this);
		}

		return dronesBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Script} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptItemProvider scriptItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Script}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptAdapter() {
		if (scriptItemProvider == null) {
			scriptItemProvider = new ScriptItemProvider(this);
		}

		return scriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Loop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoopItemProvider loopItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Loop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoopAdapter() {
		if (loopItemProvider == null) {
			loopItemProvider = new LoopItemProvider(this);
		}

		return loopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.CompositeStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeStatementItemProvider compositeStatementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.CompositeStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeStatementAdapter() {
		if (compositeStatementItemProvider == null) {
			compositeStatementItemProvider = new CompositeStatementItemProvider(this);
		}

		return compositeStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.AtomicStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicStatementItemProvider atomicStatementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.AtomicStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicStatementAdapter() {
		if (atomicStatementItemProvider == null) {
			atomicStatementItemProvider = new AtomicStatementItemProvider(this);
		}

		return atomicStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Cooperate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CooperateItemProvider cooperateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Cooperate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCooperateAdapter() {
		if (cooperateItemProvider == null) {
			cooperateItemProvider = new CooperateItemProvider(this);
		}

		return cooperateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Move} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveItemProvider moveItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Move}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveAdapter() {
		if (moveItemProvider == null) {
			moveItemProvider = new MoveItemProvider(this);
		}

		return moveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Wait} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitItemProvider waitItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Wait}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitAdapter() {
		if (waitItemProvider == null) {
			waitItemProvider = new WaitItemProvider(this);
		}

		return waitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendSignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendSignalItemProvider sendSignalItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendSignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendSignalAdapter() {
		if (sendSignalItemProvider == null) {
			sendSignalItemProvider = new SendSignalItemProvider(this);
		}

		return sendSignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SimpleWait} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleWaitItemProvider simpleWaitItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SimpleWait}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleWaitAdapter() {
		if (simpleWaitItemProvider == null) {
			simpleWaitItemProvider = new SimpleWaitItemProvider(this);
		}

		return simpleWaitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.ComplexWait} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexWaitItemProvider complexWaitItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.ComplexWait}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexWaitAdapter() {
		if (complexWaitItemProvider == null) {
			complexWaitItemProvider = new ComplexWaitItemProvider(this);
		}

		return complexWaitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Reaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReactionItemProvider reactionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Reaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReactionAdapter() {
		if (reactionItemProvider == null) {
			reactionItemProvider = new ReactionItemProvider(this);
		}

		return reactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Signal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalItemProvider signalItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.Signal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalAdapter() {
		if (signalItemProvider == null) {
			signalItemProvider = new SignalItemProvider(this);
		}

		return signalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendMapItemProvider sendMapItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.kortargyalo.drones.behavior.dronesBehavior.SendMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendMapAdapter() {
		if (sendMapItemProvider == null) {
			sendMapItemProvider = new SendMapItemProvider(this);
		}

		return sendMapItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dronesBehaviorItemProvider != null) dronesBehaviorItemProvider.dispose();
		if (scriptItemProvider != null) scriptItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (loopItemProvider != null) loopItemProvider.dispose();
		if (compositeStatementItemProvider != null) compositeStatementItemProvider.dispose();
		if (atomicStatementItemProvider != null) atomicStatementItemProvider.dispose();
		if (cooperateItemProvider != null) cooperateItemProvider.dispose();
		if (moveItemProvider != null) moveItemProvider.dispose();
		if (waitItemProvider != null) waitItemProvider.dispose();
		if (sendSignalItemProvider != null) sendSignalItemProvider.dispose();
		if (simpleWaitItemProvider != null) simpleWaitItemProvider.dispose();
		if (complexWaitItemProvider != null) complexWaitItemProvider.dispose();
		if (reactionItemProvider != null) reactionItemProvider.dispose();
		if (signalItemProvider != null) signalItemProvider.dispose();
		if (sendMapItemProvider != null) sendMapItemProvider.dispose();
	}

}
